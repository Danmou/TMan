{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TMan \u00b6 Skeleton project created by Cookiecutter PyPackage Documentation: https://Danmou.github.io/TMan GitHub: https://github.com/Danmou/TMan PyPI: https://pypi.org/project/TMan/ Free software: GPL-3.0-only Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#tman","text":"Skeleton project created by Cookiecutter PyPackage Documentation: https://Danmou.github.io/TMan GitHub: https://github.com/Danmou/TMan PyPI: https://pypi.org/project/TMan/ Free software: GPL-3.0-only","title":"TMan"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"TMan. api \u00b6 Defines the public API. TManAPI \u00b6 Main API handle. __eq__ ( self , other ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . data_dir , self . config_file , ) == ( other . data_dir , other . config_file , ) __ge__ ( self , other ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented __gt__ ( self , other ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented __init__ ( self , data_dir , config_file ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __init__ ( self , data_dir , config_file ): self . data_dir = __attr_converter_data_dir ( data_dir ) self . config_file = __attr_converter_config_file ( config_file ) self . __attrs_post_init__ () __le__ ( self , other ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented __lt__ ( self , other ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented __ne__ ( self , other ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result __repr__ ( self ) special \u00b6 Method generated by attrs for class TManAPI. Source code in tman/api.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self )) backend special \u00b6 TMan backend. cli special \u00b6 TMan CLI. main \u00b6 Main CLI entry point. gui special \u00b6 TMan GUI. main \u00b6 Main GUI entry point. main () \u00b6 Start GUI. Source code in tman/gui/main.py def main () -> None : \"\"\"Start GUI.\"\"\" app_name = \"TMan\" init_logging ( verbosity = \"DEBUG\" , logdir = user_log_dir ( app_name )) logger . debug ( \"Initializing backend\" ) api = TManAPI ( # noqa: F841 data_dir = user_data_dir ( app_name ), config_file = user_config_dir ( app_name ) + \"/config.json\" ) logger . debug ( \"Starting UI\" ) sg . theme ( \"DarkBlue\" ) layout = [ [ sg . Text ( \"Some text on Row 1\" )], [ sg . Text ( \"Enter something on Row 2\" ), sg . InputText ()], [ sg . Button ( \"Ok\" ), sg . Button ( \"Cancel\" )], ] window = sg . Window ( \"Window Title\" , layout ) while True : event , values = window . read () if event in ( None , \"Cancel\" ): break logger . info ( f \"You entered { values [ 0 ] } \" ) window . close () logger . info ( \"Finished successfully.\" ) util special \u00b6 Collection of utility functions for TMan. logging \u00b6 Various logging functionality. InterceptHandler ( Handler ) \u00b6 Handler to force stdlib logging to go through loguru. Based on https://github.com/Delgan/loguru/issues/78 emit ( self , record ) \u00b6 Process log record and log with loguru. Source code in tman/util/logging.py def emit ( self , record : logging . LogRecord ) -> None : \"\"\"Process log record and log with loguru.\"\"\" depth = self . _get_depth () logger_opt = logger . opt ( depth = depth , exception = record . exc_info ) for line in record . getMessage () . split ( \" \\n \" ): level = record . levelname level_ : Union [ str , int ] = int ( level [ 6 :]) if level . startswith ( \"Level \" ) else level logger_opt . log ( level_ , line . rstrip ()) init_logging ( verbosity , logdir ) \u00b6 Configure loggers according to specified verbosity level and log directory. Should be called at the program's main entrypoint. Source code in tman/util/logging.py def init_logging ( verbosity : str , logdir : Union [ str , Path ]) -> None : \"\"\" Configure loggers according to specified verbosity level and log directory. Should be called at the program's main entrypoint. \"\"\" # Remove default loguru logger logger . remove () # Intercept all third-party logging logging . basicConfig ( handlers = [ InterceptHandler ()], level = 0 ) # Log to stdout and logfiles trace_logfile = Path ( logdir ) / \"trace.log\" info_logfile = Path ( logdir ) / \"info.log\" kwargs : Dict [ str , Any ] = dict ( backtrace = True , diagnose = True , enqueue = True ) logger . add ( trace_logfile , level = \"TRACE\" , ** kwargs ) kwargs [ \"format\" ] = \"<level>[ {level.name[0]} ] {time:HH:mm:ss}</level> {message} \" logger . add ( info_logfile , level = \"INFO\" , ** kwargs ) logger . add ( sys . stdout , level = verbosity , ** kwargs ) logger . debug ( \"Logging initialized.\" ) logger . debug ( f \"Logging to { info_logfile } and { trace_logfile } .\" )","title":"Modules"},{"location":"api/#tman.api","text":"Defines the public API.","title":"api"},{"location":"api/#tman.api.TManAPI","text":"Main API handle.","title":"TManAPI"},{"location":"api/#tman.api.TManAPI.__eq__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __eq__ ( self , other ): if other . __class__ is not self . __class__ : return NotImplemented return ( self . data_dir , self . config_file , ) == ( other . data_dir , other . config_file , )","title":"__eq__()"},{"location":"api/#tman.api.TManAPI.__ge__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __ge__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) >= attrs_to_tuple ( other ) return NotImplemented","title":"__ge__()"},{"location":"api/#tman.api.TManAPI.__gt__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __gt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) > attrs_to_tuple ( other ) return NotImplemented","title":"__gt__()"},{"location":"api/#tman.api.TManAPI.__init__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __init__ ( self , data_dir , config_file ): self . data_dir = __attr_converter_data_dir ( data_dir ) self . config_file = __attr_converter_config_file ( config_file ) self . __attrs_post_init__ ()","title":"__init__()"},{"location":"api/#tman.api.TManAPI.__le__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __le__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) <= attrs_to_tuple ( other ) return NotImplemented","title":"__le__()"},{"location":"api/#tman.api.TManAPI.__lt__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __lt__ ( self , other ): \"\"\" Automatically created by attrs. \"\"\" if other . __class__ is self . __class__ : return attrs_to_tuple ( self ) < attrs_to_tuple ( other ) return NotImplemented","title":"__lt__()"},{"location":"api/#tman.api.TManAPI.__ne__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __ne__ ( self , other ): \"\"\" Check equality and either forward a NotImplemented or return the result negated. \"\"\" result = self . __eq__ ( other ) if result is NotImplemented : return NotImplemented return not result","title":"__ne__()"},{"location":"api/#tman.api.TManAPI.__repr__","text":"Method generated by attrs for class TManAPI. Source code in tman/api.py def __repr__ ( self ): \"\"\" Automatically created by attrs. \"\"\" try : working_set = _already_repring . working_set except AttributeError : working_set = set () _already_repring . working_set = working_set if id ( self ) in working_set : return \"...\" real_cls = self . __class__ if ns is None : qualname = getattr ( real_cls , \"__qualname__\" , None ) if qualname is not None : class_name = qualname . rsplit ( \">.\" , 1 )[ - 1 ] else : class_name = real_cls . __name__ else : class_name = ns + \".\" + real_cls . __name__ # Since 'self' remains on the stack (i.e.: strongly referenced) for the # duration of this call, it's safe to depend on id(...) stability, and # not need to track the instance and therefore worry about properties # like weakref- or hash-ability. working_set . add ( id ( self )) try : result = [ class_name , \"(\" ] first = True for name , attr_repr in attr_names_with_reprs : if first : first = False else : result . append ( \", \" ) result . extend ( ( name , \"=\" , attr_repr ( getattr ( self , name , NOTHING ))) ) return \"\" . join ( result ) + \")\" finally : working_set . remove ( id ( self ))","title":"__repr__()"},{"location":"api/#tman.backend","text":"TMan backend.","title":"backend"},{"location":"api/#tman.cli","text":"TMan CLI.","title":"cli"},{"location":"api/#tman.cli.main","text":"Main CLI entry point.","title":"main"},{"location":"api/#tman.gui","text":"TMan GUI.","title":"gui"},{"location":"api/#tman.gui.main","text":"Main GUI entry point.","title":"main"},{"location":"api/#tman.gui.main.main","text":"Start GUI. Source code in tman/gui/main.py def main () -> None : \"\"\"Start GUI.\"\"\" app_name = \"TMan\" init_logging ( verbosity = \"DEBUG\" , logdir = user_log_dir ( app_name )) logger . debug ( \"Initializing backend\" ) api = TManAPI ( # noqa: F841 data_dir = user_data_dir ( app_name ), config_file = user_config_dir ( app_name ) + \"/config.json\" ) logger . debug ( \"Starting UI\" ) sg . theme ( \"DarkBlue\" ) layout = [ [ sg . Text ( \"Some text on Row 1\" )], [ sg . Text ( \"Enter something on Row 2\" ), sg . InputText ()], [ sg . Button ( \"Ok\" ), sg . Button ( \"Cancel\" )], ] window = sg . Window ( \"Window Title\" , layout ) while True : event , values = window . read () if event in ( None , \"Cancel\" ): break logger . info ( f \"You entered { values [ 0 ] } \" ) window . close () logger . info ( \"Finished successfully.\" )","title":"main()"},{"location":"api/#tman.util","text":"Collection of utility functions for TMan.","title":"util"},{"location":"api/#tman.util.logging","text":"Various logging functionality.","title":"logging"},{"location":"api/#tman.util.logging.InterceptHandler","text":"Handler to force stdlib logging to go through loguru. Based on https://github.com/Delgan/loguru/issues/78","title":"InterceptHandler"},{"location":"api/#tman.util.logging.InterceptHandler.emit","text":"Process log record and log with loguru. Source code in tman/util/logging.py def emit ( self , record : logging . LogRecord ) -> None : \"\"\"Process log record and log with loguru.\"\"\" depth = self . _get_depth () logger_opt = logger . opt ( depth = depth , exception = record . exc_info ) for line in record . getMessage () . split ( \" \\n \" ): level = record . levelname level_ : Union [ str , int ] = int ( level [ 6 :]) if level . startswith ( \"Level \" ) else level logger_opt . log ( level_ , line . rstrip ())","title":"emit()"},{"location":"api/#tman.util.logging.init_logging","text":"Configure loggers according to specified verbosity level and log directory. Should be called at the program's main entrypoint. Source code in tman/util/logging.py def init_logging ( verbosity : str , logdir : Union [ str , Path ]) -> None : \"\"\" Configure loggers according to specified verbosity level and log directory. Should be called at the program's main entrypoint. \"\"\" # Remove default loguru logger logger . remove () # Intercept all third-party logging logging . basicConfig ( handlers = [ InterceptHandler ()], level = 0 ) # Log to stdout and logfiles trace_logfile = Path ( logdir ) / \"trace.log\" info_logfile = Path ( logdir ) / \"info.log\" kwargs : Dict [ str , Any ] = dict ( backtrace = True , diagnose = True , enqueue = True ) logger . add ( trace_logfile , level = \"TRACE\" , ** kwargs ) kwargs [ \"format\" ] = \"<level>[ {level.name[0]} ] {time:HH:mm:ss}</level> {message} \" logger . add ( info_logfile , level = \"INFO\" , ** kwargs ) logger . add ( sys . stdout , level = verbosity , ** kwargs ) logger . debug ( \"Logging initialized.\" ) logger . debug ( f \"Logging to { info_logfile } and { trace_logfile } .\" )","title":"init_logging()"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 Added \u00b6 Changed \u00b6 Removed \u00b6 0.0.1 - 2021-10-16 \u00b6 Changed \u00b6 Updated changelog format. 0.0.0 - 2021-10-15 \u00b6 Initial release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#added","text":"","title":"Added"},{"location":"changelog/#changed","text":"","title":"Changed"},{"location":"changelog/#removed","text":"","title":"Removed"},{"location":"changelog/#001---2021-10-16","text":"","title":"0.0.1 - 2021-10-16"},{"location":"changelog/#changed_1","text":"Updated changelog format.","title":"Changed"},{"location":"changelog/#000---2021-10-15","text":"Initial release.","title":"0.0.0 - 2021-10-15"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/Danmou/TMan/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 TMan could always use more documentation, whether as part of the official TMan docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/Danmou/TMan/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up TMan for local development. Fork the TMan repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/TMan.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/Danmou/TMan/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_tman.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/Danmou/TMan/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"TMan could always use more documentation, whether as part of the official TMan docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/Danmou/TMan/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up TMan for local development. Fork the TMan repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/TMan.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/Danmou/TMan/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_tman.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install TMan, run this command in your terminal: $ pip install TMan This is the preferred method to install TMan, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for TMan can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/Danmou/TMan Or download the tarball : $ curl -OJL https://github.com/Danmou/TMan/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install TMan, run this command in your terminal: $ pip install TMan This is the preferred method to install TMan, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for TMan can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/Danmou/TMan Or download the tarball : $ curl -OJL https://github.com/Danmou/TMan/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use TMan in a project import tman","title":"Usage"},{"location":"usage/#usage","text":"To use TMan in a project import tman","title":"Usage"}]}